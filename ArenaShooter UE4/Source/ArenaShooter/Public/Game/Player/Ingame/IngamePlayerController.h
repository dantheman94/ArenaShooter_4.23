// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Game/Player/BasePlayerController.h"

#include "IngamePlayerController.generated.h"

/**
 * 
 */
UCLASS()
class ARENASHOOTER_API AIngamePlayerController : public ABasePlayerController
{
	GENERATED_BODY()
	
#pragma region Protected Variables

protected:

#pragma endregion Protected Variables

#pragma region Protected Functions

protected:

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Input |

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	* @summary:	Called to bind functionality to input.
	*
	* @param:	UInputComponent* PlayerInputComponent
	*
	* @return:	virtual void
	*/
	virtual void SetupInputComponent() override;

#pragma endregion Protected Functions

#pragma region Public Functions

public:

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Interaction |

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void InteractPrimary();

	/*
	*
	*/
	void InteractSecondary();

	/*
	*
	*/
	void CancelInteractionPrimary();

	/*
	*
	*/
	void CancelInteractionSecondary();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Base
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	* @summary:	Moves the character's position that is connected to the controller on the vertical axis (forward/backward).
	*
	* @param:	float value
	*
	* @return:	void
	*/
	void MoveForward(float Value);

	/**
	* @summary:	Moves the character's position that is connected to the controller on the horizontal axis (left/right).
	*
	* @param:	float value
	*
	* @return:	void
	*/
	void MoveRight(float Value);

	/**
	* @summary:	Moves the character's aiming direction that is connected to the controller on the vertical axis (up/down).
	*
	* @param:	float value
	*
	* @return:	void
	*/
	void LookUp(float Value);

	/**
	* @summary:	Moves the character's aiming direction that is connected to the controller on the horizontal axis (left/right).
	*
	* @param:	float value
	*
	* @return:	void
	*/
	void LookRight(float Value);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Ability
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void DashEnter();

	/*
	*
	*/
	void GrappleHookEnter();

	/*
	*
	*/
	void GrappleHookExit();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Clamber
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	*
	*/
	void Clamber();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Crouch
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void CrouchHoldEnter();

	/*
	*
	*/
	void CrouchHoldExit();

	/*
	*
	*/
	void CrouchToggle();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Movement | Hover

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void HoverEnter();

	/*
	*
	*/
	void HoverExit();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Jump
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void JumpEnter();

	/*
	*
	*/
	void JumpExit();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Movement | Slide

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void SlideHoldEnter();

	/*
	*
	*/
	void SlideHoldExit();

	/*
	*
	*/
	void SlideToggle();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Movement | Sprint

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void SprintHoldEnter();

	/*
	*
	*/
	void SprintHoldExit();

	/*
	*
	*/
	void SprintToggle();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Movement | Vault
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void Vault();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Aiming 

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void AimWeaponEnter();

	/*
	*
	*/
	void AimWeaponExit();

	UFUNCTION(BlueprintPure, Category = "Combat | Aiming") float GetDefaultFov() { return _fDefaultFov; }

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Firing

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void FirePrimaryWeaponEnter();

	/*
	*
	*/
	void FirePrimaryWeaponExit();

	/*
	*
	*/
	void FireSecondaryWeaponEnter();

	/*
	*
	*/
	void FireSecondaryWeaponExit();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Grenade

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void ChargeGrenade();

	/*
	*
	*/
	void ThrowGrenade();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Melee

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void Melee();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Reloading

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void ReloadPrimaryWeapon();

	/*
	*
	*/
	void ReloadSecondaryWeapon();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Weapon | Tabbing 

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	*
	*/
	void ToggleWeapon();

#pragma endregion Public Functions

};
